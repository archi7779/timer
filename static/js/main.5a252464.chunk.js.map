{"version":3,"sources":["components/timer.jsx","components/inputComponent.jsx","components/countdown.jsx","serviceWorker.js","index.jsx"],"names":["Timer","props","handleReset","clearInterval","timerId","setState","startTime","mode","timer","Date","handleStart","state","now","setInterval","this","className","getUTCMinutes","getUTCSeconds","parseInt","getMilliseconds","type","onClick","React","Component","InputComponents","inputError","handleMinInputChange","handleSecInputChange","inputMin","inputSec","time","handleRangeInputChange","rangeInputValue","placeholder","data-time","onChange","value","disabled","min","max","step","htmlFor","name","Countdown","startTimer","countDown","Audio","play","undefined","endPoint","prevState","getTime","error","alert","userTimeMs","endPointAsMs","setMilliseconds","percent","handlePause","target","milisecs","secsToMsecs","progressBar","Math","round","getUTCHours","Boolean","window","location","hostname","match","TabPane","Tabs","vDom","defaultActiveKey","tab","key","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a252464.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from 'antd';\n\nexport default class Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timer: new Date(0),\n      startTime: null,\n      mode: 'pause',\n    };\n  }\n\n  handleReset = () => {\n    clearInterval(this.timerId);\n    this.setState({\n      startTime: null,\n      mode: 'pause',\n      timer: new Date(0),\n    });\n  };\n\n  handleStart = () => {\n    const { timer, mode } = this.state;\n    if (mode === 'pause') {\n      this.setState(\n        {\n          startTime: new Date(Date.now() - timer),\n        },\n        () => {\n          this.timerId = setInterval(() => {\n            this.setState({\n              // eslint-disable-next-line react/destructuring-assignment,react/no-access-state-in-setstate\n              timer: new Date(Date.now() - this.state.startTime),\n              mode: 'play',\n            });\n          }, 10);\n        }\n      );\n    } else {\n      clearInterval(this.timerId);\n      this.setState({\n        startTime: null,\n        mode: 'pause',\n        // я ьы хотел все тернарники реализовать через оьъект с динамической дисп. дабы если что быстро через него менять все и везьде. норм?\n      });\n    }\n  };\n\n  render() {\n    const { timer, mode } = this.state;\n    return (\n      // например тут нажатие на кноку можно было бы через этот объект реализовать, например.\n\n      <div className=\"timer\">\n        <div className=\"timer_outPutPart\">\n          <h1>Timer</h1>\n          <div className=\"timer_numbers\">\n            {timer.getUTCMinutes() < 10 ? `0${timer.getUTCMinutes()}` : timer.getUTCMinutes()}м:\n            {timer.getUTCSeconds() < 10 ? `0${timer.getUTCSeconds()}` : timer.getUTCSeconds()}с.\n            {parseInt(timer.getMilliseconds() / 10, 10) < 10\n              ? `0${parseInt(timer.getMilliseconds() / 10, 10)}`\n              : parseInt(timer.getMilliseconds() / 10, 10)}\n            мс\n          </div>\n        </div>\n        {mode === 'play' ? (\n          <Button className=\"playPause\" type=\"primary\" onClick={this.handleStart}>\n            Pause\n          </Button>\n        ) : (\n          <Button className=\"playPause\" type=\"primary\" onClick={this.handleStart}>\n            Start\n          </Button>\n        )}\n        <Button className=\"playPause\" type=\"primary\" onClick={this.handleReset}>\n          Reset\n        </Button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Input } from 'antd';\nimport PropTypes from 'prop-types';\n\nfunction InputComponents({\n  inputError,\n  handleMinInputChange,\n  handleSecInputChange,\n  inputMin,\n  inputSec,\n  time,\n  handleRangeInputChange,\n  rangeInputValue,\n}) {\n  return (\n    <>\n      <div>\n        <Input\n          className={`countDonwInput + timeInput + ${inputError}`}\n          type=\"text\"\n          placeholder=\"enter minutes\"\n          data-time=\"inputMin\"\n          onChange={handleMinInputChange}\n          value={inputMin}\n          disabled={!!time}\n        />\n        <Input\n          className=\"countDonwInput timeInput\"\n          type=\"text\"\n          placeholder=\"enter seconds\"\n          data-time=\"inputSec\"\n          onChange={handleSecInputChange}\n          value={inputSec}\n          disabled={!!time}\n        />\n      </div>\n      <div className=\"rangeInputWrapper\">\n        <Input\n          className=\"\"\n          type=\"range\"\n          min=\"0\"\n          max=\"60\"\n          step=\"0.25\"\n          value={rangeInputValue}\n          onChange={handleRangeInputChange}\n          disabled={!!time}\n        />\n        <output htmlFor=\"test\" name=\"level\">\n          {inputMin && `${inputMin}min`} {inputSec && `${inputSec}sec`}\n        </output>\n      </div>\n    </>\n  );\n}\n\nInputComponents.propTypes = {\n  inputError: PropTypes.string.isRequired,\n  handleMinInputChange: PropTypes.func.isRequired,\n  handleSecInputChange: PropTypes.func.isRequired,\n  inputMin: PropTypes.string.isRequired,\n  inputSec: PropTypes.string.isRequired,\n  time: PropTypes.number.isRequired,\n  handleRangeInputChange: PropTypes.func.isRequired,\n  rangeInputValue: PropTypes.number.isRequired,\n};\nexport default InputComponents;\n","import React from 'react';\nimport { Button, Progress } from 'antd';\nimport InputComponent from './inputComponent';\n\nexport default class Countdown extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rangeInputValue: undefined,\n      timer: new Date(0),\n      inputMin: undefined,\n      inputSec: undefined,\n      time: undefined,\n      error: false,\n      percent: 0,\n      mode: 'pause',\n      endPoint: undefined,\n    };\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.countDown);\n  }\n\n  startTimer = () => {\n    this.countDown = setInterval(() => {\n      const { time } = this.state;\n      if (time <= 0) {\n        clearInterval(this.countDown);\n        const audio = new Audio(\n          'https://interactive-examples.mdn.mozilla.net/media/examples/t-rex-roar.mp3'\n        );\n        audio.play();\n        this.setState({\n          inputMin: undefined,\n          inputSec: undefined,\n          timer: new Date(0),\n          mode: 'pause',\n          time: undefined,\n          rangeInputValue: undefined,\n          endPoint: undefined,\n        });\n        return;\n      }\n      this.setState(prevState => ({\n        time: prevState.endPoint - new Date().getTime(),\n        timer: new Date(prevState.time),\n        mode: 'play',\n      }));\n    }, 1);\n  };\n\n  handleStart = () => {\n    const { inputMin, inputSec, time } = this.state;\n    if (time) {\n      this.startTimer();\n      return;\n    }\n    if (inputMin > 720) {\n      this.setState({ error: true });\n      // eslint-disable-next-line no-alert\n      alert('max time is 720 min');\n      return;\n    }\n    if (inputMin === undefined && inputSec === undefined) {\n      this.setState({ error: true });\n      // eslint-disable-next-line no-alert\n      alert('set time up!');\n      return;\n    }\n    if (inputSec === undefined && inputMin !== undefined) {\n      const userTimeMs = inputMin * 60000;\n      const endPointAsDate = new Date();\n      const endPointAsMs = endPointAsDate.setMilliseconds(userTimeMs);\n      this.setState(\n        {\n          time: inputMin * 60000,\n          percent: inputMin * 60000,\n          error: false,\n          mode: 'play',\n          endPoint: endPointAsMs,\n        },\n        this.startTimer\n      );\n    } else if (inputSec !== undefined && inputMin === undefined) {\n      const userTimeMs = inputSec * 1000;\n      const endPointAsDate = new Date();\n      const endPointAsMs = endPointAsDate.setMilliseconds(userTimeMs);\n      this.setState(\n        {\n          time: inputSec * 1000,\n          percent: inputSec * 1000,\n          error: false,\n          mode: 'play',\n          endPoint: endPointAsMs,\n        },\n        this.startTimer\n      );\n    } else {\n      const userTimeMs = inputMin * 60000 + inputSec * 1000;\n      const endPointAsDate = new Date();\n      const endPointAsMs = endPointAsDate.setMilliseconds(userTimeMs);\n      this.setState(\n        {\n          time: inputMin * 60000 + inputSec * 1000,\n          percent: inputMin * 60000 + inputSec * 1000,\n          error: false,\n          mode: 'play',\n          endPoint: endPointAsMs,\n        },\n        this.startTimer\n      );\n    }\n  };\n\n  handlePause = () => {\n    clearInterval(this.countDown);\n    this.setState({\n      mode: 'pause',\n    });\n  };\n\n  handleReset = () => {\n    clearInterval(this.countDown);\n    this.setState({\n      inputMin: undefined,\n      inputSec: undefined,\n      timer: new Date(0),\n      mode: 'pause',\n      time: undefined,\n      rangeInputValue: undefined,\n    });\n  };\n\n  handleMinInputChange = ({ target }) => {\n    const { inputSec } = this.state;\n    this.setState({\n      inputMin: target.value,\n      rangeInputValue: inputSec ? +target.value + +inputSec / 60 : +target.value,\n    });\n  };\n\n  handleSecInputChange = ({ target }) => {\n    const { inputMin } = this.state;\n    this.setState({\n      inputSec: target.value,\n      rangeInputValue: inputMin ? +inputMin + +target.value / 60 : +target.value / 60,\n    });\n  };\n\n  handleRangeInputChange = ({ target }) => {\n    const milisecs = target.value * 6000;\n    const secsToMsecs = (milisecs % 6000) / 100;\n    this.setState({\n      rangeInputValue: target.value,\n      inputMin: parseInt(milisecs / 6000, 10),\n      inputSec: secsToMsecs,\n    });\n  };\n\n  progressBar = () => {\n    const { percent, time } = this.state;\n    return time ? Math.round((100 * (percent - time)) / percent) : 0;\n  };\n\n  render() {\n    const { timer, inputMin, inputSec, rangeInputValue, error, time, mode } = this.state;\n    const inputError = error ? 'error' : 'ok';\n    return (\n      <div className=\"countDown\">\n        <h1>CountDown</h1>\n        <InputComponent\n          inputError={inputError}\n          handleMinInputChange={this.handleMinInputChange}\n          handleSecInputChange={this.handleSecInputChange}\n          inputMin={inputMin}\n          inputSec={inputSec}\n          time={time}\n          handleRangeInputChange={this.handleRangeInputChange}\n          rangeInputValue={rangeInputValue}\n        />\n        <div className=\"countDownOutPut\">\n          {timer.getUTCHours() < 10 ? `0${timer.getUTCHours()}` : timer.getUTCHours()}ч:\n          {timer.getUTCMinutes() < 10 ? `0${timer.getUTCMinutes()}` : timer.getUTCMinutes()}м:\n          {timer.getUTCSeconds() < 10 ? `0${timer.getUTCSeconds()}` : timer.getUTCSeconds()}с.\n          {parseInt(timer.getMilliseconds() / 10, 10) < 10\n            ? `0${parseInt(timer.getMilliseconds() / 10, 10)}`\n            : parseInt(timer.getMilliseconds() / 10, 10)}\n          мс\n        </div>\n\n        {mode === 'pause' ? (\n          <Button type=\"primary\" onClick={this.handleStart} className=\"playPause\">\n            Start\n          </Button>\n        ) : (\n          <Button type=\"primary\" onClick={this.handlePause} className=\"playPause\">\n            Pause\n          </Button>\n        )}\n        <Button type=\"primary\" onClick={this.handleReset} className=\"playPause\">\n          Reset\n        </Button>\n        <Progress percent={this.progressBar()} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.sass';\nimport 'antd/dist/antd.css';\nimport { Tabs } from 'antd';\nimport Timer from './components/timer';\nimport Countdown from './components/countdown';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst { TabPane } = Tabs;\n\nconst vDom = (\n  <Tabs defaultActiveKey=\"1\" className=\"wrapper\">\n    <TabPane tab=\"Timer\" key=\"1\">\n      <Timer />\n    </TabPane>\n    <TabPane tab=\"CountDown\" key=\"2\">\n      <Countdown />\n    </TabPane>\n  </Tabs>\n);\n\nReactDOM.render(vDom, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}