{"version":3,"sources":["components/timer.js","components/countdown.js","serviceWorker.js","index.js"],"names":["Timer","props","handleReset","clearInterval","timerId","setState","startTime","mode","timer","Date","handleStart","state","now","setInterval","this","className","getMinutes","getSeconds","parseInt","getMilliseconds","type","onClick","React","Component","CountDown","RangehandleChange","target","milisecs","value","test","rangeInputValue","inputMin","inputSec","callback","countDown","time","midiSounds","playChordNow","error","alert","undefined","percent","handleInputChange","dataset","progressBar","Math","round","inputEror","placeholder","data-time","onChange","name","min","max","step","htmlFor","getHours","style","display","zIndex","ref","appElementName","instruments","Boolean","window","location","hostname","match","vDom","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13498d22.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from 'antd';\n\nexport default class Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timer: new Date(0),\n      startTime: null,\n      mode: 'pause',\n    };\n  }\n\n  componentDidMount() {}\n\n  handleReset = () => {\n    clearInterval(this.timerId);\n    this.setState({\n      startTime: null,\n      mode: 'pause',\n      timer: new Date(0),\n    });\n  };\n\n  handleStart = () => {\n    const { timer, mode } = this.state;\n    if (mode === 'pause') {\n      this.setState(\n        {\n          startTime: new Date(Date.now() - timer),\n        },\n        () => {\n          this.timerId = setInterval(() => {\n            this.setState({\n              timer: new Date(Date.now() - this.state.startTime),\n              mode: 'play',\n            });\n          }, 100);\n        }\n      );\n    } else {\n      clearInterval(this.timerId);\n      this.setState({\n        startTime: null,\n        mode: 'pause',\n        // я ьы хотел все тернарники реализовать через оьъект с динамической дисп. дабы если что быстро через него менять все и везьде. норм?\n      });\n    }\n  };\n\n  render() {\n    const { timer, mode } = this.state;\n    return (\n      // например тут нажатие на кноку можно было бы через этот объект реализовать, например.\n\n      <div className=\"timer\">\n        <div className=\"timer_outPutPart\">\n          <h1>Timer</h1>\n          <div className=\"timer_numbers\">\n            {timer.getMinutes()}:{timer.getSeconds()}:{parseInt(timer.getMilliseconds() / 100)}\n          </div>\n        </div>\n        {mode === 'play' ? (\n          <Button className=\"playPause\" type=\"primary\" onClick={this.handleStart}>\n            Pause\n          </Button>\n        ) : (\n          <Button className=\"playPause\" type=\"primary\" onClick={this.handleStart}>\n            Start\n          </Button>\n        )}\n        <Button className=\"playPause\" type=\"primary\" onClick={this.handleReset}>\n          Reset\n        </Button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Button, Input, Progress } from 'antd';\nimport MIDISounds from 'midi-sounds-react';\n\nexport default class CountDown extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rangeInputValue: undefined,\n      // не знал как еще избавиться от 3 часов разницы из-за часовых поясов\n      timer: new Date(-10800000),\n      inputMin: undefined,\n      inputSec: undefined,\n      time: undefined,\n      error: false,\n      percent: 0,\n      // реакт выдает ошибку, управляемые\\не управляемые компоненты. как обойти если мне на ипнутах хочется плейсхолдер иметь.\n    };\n  }\n\n  RangehandleChange = ({ target }) => {\n    const milisecs = target.value * 6000;\n    const test = (milisecs % 6000) / 60;\n    this.setState({\n      rangeInputValue: target.value,\n      inputMin: parseInt(milisecs / 6000),\n      inputSec: test,\n    });\n  };\n\n  callback = () => {\n    this.countDown = setInterval(() => {\n      if (this.state.time === 0) {\n        clearInterval(this.countDown);\n        // ++sound\n        this.midiSounds.playChordNow(3, [60], 2.5);\n      }\n      this.setState({\n        time: this.state.time - 100,\n        timer: new Date(this.state.time - 10800000),\n      });\n    }, 100);\n  };\n\n  handleStart = () => {\n    const { inputMin, inputSec } = this.state;\n    // как сделать так, чтобы эта конструкция(выше) работа и при вложенности, а то не работает\n    if (inputMin > 720) {\n      this.setState({ error: true });\n      alert('max time is 720 min');\n      return;\n    }\n    if (inputMin === undefined && inputSec === undefined) {\n      this.setState({ error: true });\n      alert('set time up!');\n      return;\n    }\n    if (inputSec === undefined && inputMin !== undefined) {\n      this.setState(\n        {\n          time: inputMin * 60000,\n          percent: inputMin * 60000,\n          error: false,\n        },\n        this.callback\n      );\n    } else if (this.state.inputSec !== undefined && this.state.inputMin === undefined) {\n      this.setState(\n        {\n          time: this.state.inputSec * 1000,\n          percent: this.state.inputSec * 1000,\n          error: false,\n        },\n        this.callback\n      );\n    } else {\n      this.setState(\n        {\n          time: this.state.inputMin * 60000 + this.state.inputSec * 1000,\n          percent: this.state.inputMin * 60000 + this.state.inputSec * 1000,\n          error: false,\n        },\n        this.callback\n      );\n    }\n  };\n\n  handleReset = () => {\n    clearInterval(this.countDown);\n    this.setState({\n      // почему-то не получается дать им undefined чтобы инпуты показали плейсхолдеры\n      inputMin: 0,\n      inputSec: 0,\n      timer: new Date(-10800000),\n      mode: 'pause',\n    });\n  };\n\n  handleInputChange = ({ target }) => {\n    this.setState({\n      [target.dataset.time]: target.value,\n    });\n  };\n\n  progressBar = () => {\n    return this.state.time\n      ? Math.round((100 * (this.state.percent - this.state.time)) / this.state.percent)\n      : 0;\n  };\n\n  render() {\n    const { timer, inputMin, inputSec, rangeInputValue, error } = this.state;\n    const inputEror = error ? 'errorTest' : 'ok';\n    const soundStyles = {\n      display: 'none',\n      zIndex: -1000,\n    };\n    return (\n      <div className=\"countDown\">\n        <h1>CountDown</h1>\n        <div>\n          <Input\n            className={`countDonwInput + timeInput + ${inputEror}`}\n            type=\"text\"\n            placeholder=\"enter minutes\"\n            data-time=\"inputMin\"\n            onChange={this.handleInputChange}\n            value={inputMin}\n          />\n          <Input\n            className=\"countDonwInput timeInput\"\n            type=\"text\"\n            placeholder=\"enter seconds\"\n            data-time=\"inputSec\"\n            onChange={this.handleInputChange}\n            value={inputSec}\n          />\n        </div>\n        <div className=\"rangeInputWrapper\">\n          <Input\n            className=\"\"\n            type=\"range\"\n            name=\"test\"\n            min=\"0\"\n            max=\"60\"\n            step=\"0.25\"\n            value={rangeInputValue}\n            onChange={this.RangehandleChange}\n          />\n          <output htmlFor=\"test\" name=\"level\">\n            {rangeInputValue}\n          </output>\n        </div>\n        <div>\n          {timer.getHours()}:{timer.getMinutes()}:{timer.getSeconds()}:\n          {parseInt(timer.getMilliseconds() / 100)}\n        </div>\n\n        <Button type=\"primary\" onClick={this.handleStart}>\n          Start\n        </Button>\n        <Button type=\"primary\" onClick={this.handleReset}>\n          Reset\n        </Button>\n        <Progress percent={this.progressBar()} />\n        <MIDISounds\n          style={soundStyles}\n          ref={ref => (this.midiSounds = ref)}\n          appElementName=\"root\"\n          instruments={[3]}\n        />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.sass'\nimport 'antd/dist/antd.css'\nimport Timer from './components/timer';\nimport CountDown from  './components/countdown'\n\nimport * as serviceWorker from './serviceWorker';\n\n\n\nconst vDom = (<div className='wrapper'><Timer /> <CountDown /> </ div>);\n\n\nReactDOM.render(vDom, document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}