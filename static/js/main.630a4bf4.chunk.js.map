{"version":3,"sources":["components/timer.jsx","components/countdown.jsx","serviceWorker.js","index.jsx"],"names":["Timer","props","handleReset","clearInterval","timerId","setState","startTime","mode","timer","Date","handleStart","state","now","setInterval","this","className","getMinutes","getSeconds","parseInt","getMilliseconds","type","onClick","React","Component","Countdown","RangehandleChange","target","milisecs","value","secsToMsecs","rangeInputValue","inputMin","inputSec","callback","time","countDown","Audio","play","undefined","disabled","error","alert","percent","handlePause","handleInputChange","dataset","progressBar","Math","round","inputEror","placeholder","data-time","onChange","name","min","max","step","htmlFor","getHours","Boolean","window","location","hostname","match","vDom","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.630a4bf4.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from 'antd';\n\nexport default class Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timer: new Date(0),\n      startTime: null,\n      mode: 'pause',\n    };\n  }\n\n  componentDidMount() {}\n\n  handleReset = () => {\n    clearInterval(this.timerId);\n    this.setState({\n      startTime: null,\n      mode: 'pause',\n      timer: new Date(0),\n    });\n  };\n\n  handleStart = () => {\n    const { timer, mode } = this.state;\n    if (mode === 'pause') {\n      this.setState(\n        {\n          startTime: new Date(Date.now() - timer),\n        },\n        () => {\n          this.timerId = setInterval(() => {\n            this.setState({\n              timer: new Date(Date.now() - this.state.startTime),\n              mode: 'play',\n            });\n          }, 100);\n        }\n      );\n    } else {\n      clearInterval(this.timerId);\n      this.setState({\n        startTime: null,\n        mode: 'pause',\n        // я ьы хотел все тернарники реализовать через оьъект с динамической дисп. дабы если что быстро через него менять все и везьде. норм?\n      });\n    }\n  };\n\n  render() {\n    const { timer, mode } = this.state;\n    return (\n      // например тут нажатие на кноку можно было бы через этот объект реализовать, например.\n\n      <div className=\"timer\">\n        <div className=\"timer_outPutPart\">\n          <h1>Timer</h1>\n          <div className=\"timer_numbers\">\n            {timer.getMinutes()}:{timer.getSeconds()}:{parseInt(timer.getMilliseconds() / 100)}\n          </div>\n        </div>\n        {mode === 'play' ? (\n          <Button className=\"playPause\" type=\"primary\" onClick={this.handleStart}>\n            Pause\n          </Button>\n        ) : (\n          <Button className=\"playPause\" type=\"primary\" onClick={this.handleStart}>\n            Start\n          </Button>\n        )}\n        <Button className=\"playPause\" type=\"primary\" onClick={this.handleReset}>\n          Reset\n        </Button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Button, Input, Progress } from 'antd';\nimport MIDISounds from 'midi-sounds-react';\n\nexport default class Countdown extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rangeInputValue: undefined,\n      // не знал как еще избавиться от 3 часов разницы из-за часовых поясов\n      timer: new Date(-10800000),\n      inputMin: undefined,\n      inputSec: undefined,\n      time: undefined,\n      error: false,\n      percent: 0,\n      mode: 'pause',\n      disabled: false,\n      // реакт выдает ошибку, управляемые\\не управляемые компоненты. как обойти если мне на ипнутах хочется плейсхолдер иметь.\n    };\n  }\n\n  RangehandleChange = ({ target }) => {\n    const milisecs = target.value * 6000;\n    const secsToMsecs = (milisecs % 6000) / 60;\n    this.setState({\n      rangeInputValue: target.value,\n      inputMin: parseInt(milisecs / 6000, 10),\n      inputSec: secsToMsecs,\n    });\n  };\n\n  callback = () => {\n    // вот тут не работает {time} = state\n    const { time } = this.state;\n    this.countDown = setInterval(() => {\n      if (this.state.time === 0) {\n        clearInterval(this.countDown);\n        const audio = new Audio(\n          'https://interactive-examples.mdn.mozilla.net/media/examples/t-rex-roar.mp3'\n        );\n        audio.play();\n        this.setState({\n          // почему-то не получается дать им undefined чтобы инпуты показали плейсхолдеры\n          inputMin: undefined,\n          inputSec: undefined,\n          timer: new Date(-10800000),\n          mode: 'pause',\n          time: undefined,\n          rangeInputValue: undefined,\n          disabled: false,\n        });\n        return;\n      }\n      this.setState({\n        time: this.state.time - 100,\n        timer: new Date(this.state.time - 10800000),\n        mode: 'play',\n        disabled: true,\n      });\n    }, 100);\n  };\n\n  handleStart = () => {\n    const { inputMin, inputSec, time } = this.state;\n    if (time) {\n      this.callback();\n      return;\n    }\n    // как сделать так, чтобы эта конструкция(выше) работа и при вложенности, а то не работает\n    if (inputMin > 720) {\n      this.setState({ error: true });\n      alert('max time is 720 min');\n      return;\n    }\n    if (inputMin === undefined && inputSec === undefined) {\n      this.setState({ error: true });\n      alert('set time up!');\n      return;\n    }\n    if (inputSec === undefined && inputMin !== undefined) {\n      this.setState(\n        {\n          time: inputMin * 60000,\n          percent: inputMin * 60000,\n          error: false,\n          mode: 'play',\n        },\n        this.callback\n      );\n    } else if (inputSec !== undefined && inputMin === undefined) {\n      this.setState(\n        {\n          time: inputSec * 1000,\n          percent: inputSec * 1000,\n          error: false,\n          mode: 'play',\n        },\n        this.callback\n      );\n    } else {\n      this.setState(\n        {\n          time: inputMin * 60000 + inputSec * 1000,\n          percent: inputMin * 60000 + inputSec * 1000,\n          error: false,\n          mode: 'play',\n        },\n        this.callback\n      );\n    }\n  };\n\n  handlePause = () => {\n    clearInterval(this.countDown);\n    this.setState({\n      mode: 'pause',\n    });\n  };\n\n  handleReset = () => {\n    clearInterval(this.countDown);\n    this.setState({\n      // почему-то не получается дать им undefined чтобы инпуты показали плейсхолдеры\n      inputMin: undefined,\n      inputSec: undefined,\n      timer: new Date(-10800000),\n      mode: 'pause',\n      time: undefined,\n      rangeInputValue: undefined,\n      disabled: false,\n    });\n  };\n\n  handleInputChange = ({ target }) => {\n    this.setState({\n      [target.dataset.time]: target.value,\n    });\n  };\n\n  progressBar = () => {\n    const { percent, time } = this.state;\n    return time ? Math.round((100 * (percent - time)) / percent) : 0;\n  };\n\n  render() {\n    const { timer, inputMin, inputSec, rangeInputValue, error } = this.state;\n    const inputEror = error ? 'errorTest' : 'ok';\n    const soundStyles = {\n      display: 'none',\n      zIndex: -1000,\n    };\n    return (\n      <div className=\"countDown\">\n        <h1>CountDown</h1>\n        <div>\n          <Input\n            className={`countDonwInput + timeInput + ${inputEror}`}\n            type=\"text\"\n            placeholder=\"enter minutes\"\n            data-time=\"inputMin\"\n            onChange={this.handleInputChange}\n            value={inputMin}\n            disabled={this.state.disabled}\n          />\n          <Input\n            className=\"countDonwInput timeInput\"\n            type=\"text\"\n            placeholder=\"enter seconds\"\n            data-time=\"inputSec\"\n            onChange={this.handleInputChange}\n            value={inputSec}\n            disabled={this.state.disabled}\n          />\n        </div>\n        <div className=\"rangeInputWrapper\">\n          <Input\n            className=\"\"\n            type=\"range\"\n            name=\"test\"\n            min=\"0\"\n            max=\"60\"\n            step=\"0.25\"\n            value={rangeInputValue}\n            onChange={this.RangehandleChange}\n            disabled={this.state.disabled}\n          />\n          <output htmlFor=\"test\" name=\"level\">\n            {rangeInputValue}\n          </output>\n        </div>\n        <div>\n          {timer.getHours()}:{timer.getMinutes()}:{timer.getSeconds()}:\n          {parseInt(timer.getMilliseconds() / 100, 10)}\n        </div>\n\n        {this.state.mode === 'pause' ? (\n          <Button type=\"primary\" onClick={this.handleStart}>\n            Start\n          </Button>\n        ) : (\n          <Button type=\"primary\" onClick={this.handlePause}>\n            Pause\n          </Button>\n        )}\n\n        <Button type=\"primary\" onClick={this.handleReset}>\n          Reset\n        </Button>\n        <Progress percent={this.progressBar()} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.sass';\nimport 'antd/dist/antd.css';\nimport Timer from './components/timer';\nimport Countdown from './components/countdown'\n\nimport * as serviceWorker from './serviceWorker';\n\nconst vDom = (<div className='wrapper'><Timer /> <Countdown /> </ div>);\n\n\nReactDOM.render(vDom, document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}